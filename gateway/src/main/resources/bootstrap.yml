# 服务器
server:
  # 端口
  port: ${gateway_port:1101}
#
# Spring 配置
spring:
  application:
    name: gateway
  # 配置环境
  profiles:
    # 激活
    active:
      - dev
  config:
    import:
      # 此配置是导入 模块 cloud-starter-core 中的配置，实际使用时，应当导入到 Nacos 中，作为共享配置
      # （在此处这样使用的目的是所有服务一起使用，并且开发者不必担心Nacos配置未能及时同步到项目中的问题）
      - optional:xuxiaowei.yml
  # Cloud 配置
  cloud:
    # 网络工具
    inetutils:
      # 将被忽略的网络接口的 Java 正则表达式列表。
      ignored-interfaces:
        # 正则表达式
        # 忽略 VMware 虚拟机网卡
        - VMware.*
        # 忽略 VirtualBox 虚拟机网卡
        - VirtualBox.*
    #
    # Nacos-配置
    nacos:
      username: ${nacos_username:xuxiaowei-cloud}
      password: ${nacos_password:xuxiaowei.com.cn}
      # 服务发现
      discovery:
        # 服务发现地址
        server-addr: ${nacos_xuxiaowei_cloud_addr:nacos.example.xuxiaowei.cloud:8848}
        # 命名空间
        namespace: ${nacos_xuxiaowei_cloud_discovery_namespace:}
        # 自定义注册IP（为空时使用程序自动获取本机IP）
        ip: ${gateway_discovery_ip:}
        # 自定义注册端口（为-1时使用程序启动时的端口）
        port: ${gateway_discovery_port:-1}
      # 服务配置
      config:
        # 配置文件后缀名
        file-extension: yml
        # 配置服务器地址
        server-addr: ${nacos_xuxiaowei_cloud_addr:nacos.example.xuxiaowei.cloud:8848}
        # 命名空间
        namespace: ${nacos_xuxiaowei_cloud_config_namespace:}
        # 共享配置
        shared-configs:
          - dataId: xuxiaowei.${spring.cloud.nacos.config.file-extension}
            # 是否支持刷新
            refresh: true


---
# 以下配置可放入 nacos 中


#
# Spring 配置
spring:
  # 微服务 配置
  cloud:
    # 网关 配置
    gateway:
      # 发现 配置
      discovery:
        # 定位器
        locator:
          # 服务名小写
          lowerCaseServiceId: true
          # 启用 DiscoveryClient 网关集成的标志。
          # 服务自动映射
          enabled: true
#      routes:
#        # 用于地址转换
#        # 此处地址转换也可以缺省，将原来的 /v3/api-docs/(?<path>.*) 使用 springdoc.swagger-ui.urls 修改为 /$\{path}/v3/api-docs
#        - id: openapi
#          # 转换的地址（当前服务的地址）
#          uri: http://localhost:${server.port}
#          predicates:
#            # 匹配路径
#            - Path=/v3/api-docs/**
#          filters:
#            # 规则
#            # 将 /v3/api-docs/* 转发到 */v3/api-docs
#            - RewritePath=/v3/api-docs/(?<path>.*), /$\{path}/v3/api-docs

#        # 此配置原来默认缺省
#        # 此处添加是为了让网关启动时，自动识别到此服务（如果不进行下方配置，需要先启动 passport 服务后，再启动 gateway 才能在 gateway 的 SpringDoc 中识别到 passport 服务）
#        # 此处是第一种方式配置 网关发现服务中的 API doc（使用 springdoc.swagger-ui.urls 配置后，此处配置将无效）
#        - id: passport
#          uri: lb://passport
#          predicates:
#            - Path=/passport/**
#          filters:
#            # 规则
#            # 将 /passport/** 转发到 /**
#            - RewritePath=/passport/(?<path>.*), /$\{path}
#        # 此配置原来默认缺省
#        # 此处添加是为了让网关启动时，自动识别到此服务（如果不进行下方配置，需要先启动 user 服务后，再启动 gateway 才能在 gateway 的 SpringDoc 中识别到 user 服务）
#        # 此处是第一种方式配置 网关发现服务中的 API doc（使用 springdoc.swagger-ui.urls 配置后，此处配置将无效）
#        - id: user
#          uri: lb://user
#          predicates:
#            - Path=/user/**
#          filters:
#            # 规则
#            # 将 /user/** 转发到 /**
#            - RewritePath=/user/(?<path>.*), /$\{path}
#        # 此配置原来默认缺省
#        # 此处添加是为了让网关启动时，自动识别到此服务（如果不进行下方配置，需要先启动 master-data 服务后，再启动 gateway 才能在 gateway 的 SpringDoc 中识别到 master-data 服务）
#        # 此处是第一种方式配置 网关发现服务中的 API doc（使用 springdoc.swagger-ui.urls 配置后，此处配置将无效）
#        - id: master-data
#          uri: lb://master-data
#          predicates:
#            - Path=/master-data/**
#          filters:
#            # 规则
#            # 将 /master-data/** 转发到 /**
#            - RewritePath=/master-data/(?<path>.*), /$\{path}
#        # 此配置原来默认缺省
#        # 此处添加是为了让网关启动时，自动识别到此服务（如果不进行下方配置，需要先启动 file 服务后，再启动 gateway 才能在 gateway 的 SpringDoc 中识别到 file 服务）
#        # 此处是第一种方式配置 网关发现服务中的 API doc（使用 springdoc.swagger-ui.urls 配置后，此处配置将无效）
#        - id: file
#          uri: lb://file
#          predicates:
#            - Path=/file/**
#          filters:
#            # 规则
#            # 将 /file/** 转发到 /**
#            - RewritePath=/file/(?<path>.*), /$\{path}

springdoc:
  swagger-ui:
    # 此处是第二种方式配置 网关发现服务中的 API doc（网友提供）
    # 使用 springdoc.swagger-ui.urls 配置后，网关路由、GroupedOpenApi 对应的 Bean 将全部失效，即：仅有此处 网关发现服务中的 API doc 有效
    urls:
      - name: passport
        url: /passport/v3/api-docs
      - name: user
        url: /user/v3/api-docs
      - name: master-data
        url: /master-data/v3/api-docs
      - name: file
        url: /file/v3/api-docs

---

# 跨域配置
spring:
  cloud:
    gateway:
      globalcors:
        # 跨域配置
        corsConfigurations:
          '[/**]':
            # 携带 Cookie 等信息
            allow-credentials: true
            # 允许跨域的来源(协议、域名、ip)，全部：*
            # 因使用了 Session 共享，请使用 example.xuxiaowei.cloud 子域
            allowedOrigins:
              - http://gateway.example.xuxiaowei.cloud
              - https://gateway.example.xuxiaowei.cloud
              - http://passport.example.xuxiaowei.cloud
              - https://passport.example.xuxiaowei.cloud
              - http://passport.example.xuxiaowei.cloud:1401
              - http://passport.example.xuxiaowei.cloud:1411
              - http://passport.example.xuxiaowei.cloud:1412
              - http://example.xuxiaowei.cloud
              - https://example.xuxiaowei.cloud
              - http://example.xuxiaowei.cloud:1001
              - http://example.xuxiaowei.cloud:1002
              # tauri 开发域名
              - http://localhost:1001
              # tauri 生产域名
              - https://tauri.localhost
            # 允许跨域的 HTTP 方法， 默认为 GET 和 OPTIONS，全部：*
            allowedMethods: "GET,POST"
            # 允许跨域请求中的请求头字段，全部：*
            allowedHeaders: "*"

---

cloud:
  cors:
    allow-orgin-null-list:
      # 授权操作使用 form action post，无 Origin
      - /passport/oauth2/authorize

---

#
# 网关白名单，不进行权限验证
cloud:
  white-list:
    ignores:
      # passport登录请求
      - login
      # 网关图标
      - /favicon.ico
      # springdoc swagger-ui
      - /webjars/swagger-ui/**
      # springdoc
      - /v3/api-docs/**
    services:
      - name: passport
        path-list:
          # 登录主页
          - /
          # passport图标
          - /favicon.ico
          # 固定名称的CSS
          - /passport-assets/index.css
          # 固定名称的JS
          - /passport-assets/index.js
          # 图片
          - /passport-assets/*.png
          # 登录请求
          - /login
          # 登录失败
          - /login/failure
          # 获取Token
          - /code/*
          # 授权地址
          - /oauth2/authorize
          # 授权地址
          - /oauth2.1/authorize
          # 检查Token
          - /oauth2/check_token
          # Token
          - /oauth2/token
          # 退出登录
          - /signout
          # 忘记密码
          - /forget
          # 检查重置密码凭证
          - /forget/check-reset-password-token
          # 重置密码
          - /forget/reset-password
          # 重置密码（手机验证码）
          - /forget/reset-type-phone-password
          # 微信公众号跳转到微信授权页面
          - /wechat-offiaccount/authorize/*
          # 微信公众号授权码接收服务
          - /wechat-offiaccount/code/*
          # 微信开放平台 网站应用 跳转到微信授权页面
          - /wechat-oplatform/website/authorize/*
          # 微信开放平台 网站应用 授权码接收服务
          - /wechat-oplatform/website/code/*
          # 码云 Gitee 网站应用 跳转到码云Gitee授权页面
          - /gitee/authorize/*
          # 码云 Gitee 网站应用 授权码接收服务
          - /gitee/code/*
          # QQ 网站应用 跳转到QQ授权页面
          - /qq/website/authorize/*
          # QQ 网站应用 授权码接收服务
          - /qq/website/code/*
          # 微博 网站应用 授权页面
          - /weibo/authorize/*
          # 微博 网站应用 授权码接收服务
          - /weibo/code/*
          # GitLab 网站应用 授权页面
          - /gitlab/authorize/*
          # GitLab 网站应用 授权码接收服务
          - /gitlab/code/*
          # 企业微信扫码登录 授权页面
          - /wechat-work/website/authorize/*/*
          # 企业微信扫码登录 授权码接收服务
          - /wechat-work/website/code/*/*
          # Github 登录 授权页面
          - /github/authorize/*
          # Github 登录 授权码接收服务
          - /github/code/*
          # 钉钉 dingtalk 登录 授权页面
          - /dingtalk/authorize/*
          # 钉钉 dingtalk 登录 授权码接收服务
          - /dingtalk/code/*
          # 支付宝 网站应用 登录 授权页面
          - /alipay-oplatform/website/authorize/*
          # 支付宝 网站应用 登录 授权码接收服务
          - /alipay-oplatform/website/code/*
          # 飞书网页应用 登录 授权页面
          - /feishu-webpage/authorize/*
          # 飞书网页应用 授权码接收服务
          - /feishu-webpage/code/*
          # 分页查询租户-登录页面
          - /tenant/page/login
          # 配置
          - /configuration
          # springdoc
          - /v3/api-docs/**
      - name: user
        path-list:
          # 图片验证码
          - /patchca
          # springdoc
          - /v3/api-docs/**
      - name: master-data
        path-list:
          # springdoc
          - /v3/api-docs/**
      - name: file
        path-list:
          # springdoc
          - /v3/api-docs/**
      - name: webservice
        path-list:
          - /cxf/**
    actuator-ip-list:
      - 127.0.0.1
      # 代表：192.168.0.0 ~ 192.168.0.255
      - 192.168.0.0/24
      # 代表：192.168.5.0 ~ 192.168.5.255
      - 192.168.5.0/24
      # 代表：10.0.4.0 ~ 10.0.4.255
      - 10.0.4.0/24
      # 代表：172.16.148.0 ~ 172.16.148.255
      - 172.16.148.0/24

---

# 黑名单
cloud:
  black-list:
    ip-list:
      - 192.168.9.100
    services:
      - ip: 192.168.9.200
        name: passport
        pathList:
          - /test

---

# WebSocket 配置
cloud:
  web-socket:
    endpoint-paths:
      - /broadcast

---

# 加密
cloud:
  aes:
    # 默认加密配置
    default-key: 1234567890123456
    default-iv: abcdefghijklmnop
    # 检查加密数据中的时间戳是否在有效时间范围内，单位：秒
    time: 300
    # 指定客户加密配置
    list:
      - client-id: xuxiaowei_client_wechat_miniprogram_id
        key: af38459509ce4994
        iv: 36d4209695bb4f15
    # 强制加密路径
    force-paths:
      # 服务名
      - service: user
        # 路径列表
        paths:
          - page

---

# 签名
cloud:
  sign:
    private-key: MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAIPlcPxMQvt3oTA3paiFSEsw9vHsu6apNjiEPTAdANUHxBw63IqIdMkQv4qeZjrraCQMmfGJp4xSpflzYCd5d/fAsJiLojwmYWpI2E53E12j9i+SU9yYECbGlbaCtl07gnYxZXKQesAwPTtgk4pcNlzB7gdCCmggfuEq9qVxzhCdAgMBAAECgYBYoWqOL5TnNFlddFdeacnNtSaMJR9n+9cSnVIcrbCsdl6C9c7TTKTlo9qChLR/rUa6yrj7xRuQwM0FVlFr1UUWeoiYK4A7KKSMwbe5HZkj5hZM1O9T/nqXrdI+qztqUcPMoThE1W3pSJ1SuFH2NSoWyXuyYXRdoAyTwoVSVZ4WBQJBAOeqB4PlrNCVgCveabrc/WTTSuUvu42NKG7n7huaQtrDH7uy0GIumq8MwuZl+R6ZUtyxv2CA9MK0dPyPKSkDbCcCQQCRwG2g2XPgCDXyy0Sl+GOEnkf2JWKVhuGrlCf41gwJP77JPMekSrNi0Yw27c0YwdFmrtm/GKAGhL4vYtvxo+ObAkEAqkRl0aN1KLk4wwVtYFIcS4agfWJfzuH43crJTrBKgs72+9WpIwBt4ErY1M4OE1dNd7eMmTkurAxGD3qJHgPN8QJAbIQSm0GLjm9Oi1hf4hpPLfwSo+ctwRpNhsul/xSOnYxCZd3E3kNnz9koRfVDUH1thMAGCsswyemnF+zIyN42pQJAI6ZJSx+bUacrS6yhPLKJXDRrZtp7xCGLesc6kMK6Yyaa2FcQWs+XZncPEdlFxsFgOgAsBd9s+PpCv6DRFIR9Lg==
    public-key: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCD5XD8TEL7d6EwN6WohUhLMPbx7LumqTY4hD0wHQDVB8QcOtyKiHTJEL+KnmY662gkDJnxiaeMUqX5c2AneXf3wLCYi6I8JmFqSNhOdxNdo/YvklPcmBAmxpW2grZdO4J2MWVykHrAMD07YJOKXDZcwe4HQgpoIH7hKvalcc4QnQIDAQAB

---

# 流控防护组件
spring:
  cloud:
    sentinel:
      transport:
        # 端口冲突时，会自动 +1，直到找到可用端口为止
        port: ${gateway_sentinel_port:9001}
