# sonarqube
sonarqube-check:
  stage: k8s-package
  image: maven:3.6.3-jdk-11
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
      - .m2/repository
      - passport-ui/node/
      - passport-ui/node_modules/
      - ui/node/
      - ui/node_modules/
  script:
    # 使用 Maven 私库（文档：https://gitlab-k8s.xuxiaowei.com.cn/gitlab-k8s/docs/nexus/docker-install-nexus），用于加速下载依赖
    - mvn verify sonar:sonar -s settings-private.xml
  # 允许失败
  allow_failure: true
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"

#
# k8s-package
k8s-package:
  variables:
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  stage: k8s-package
  image: maven:3.6.3-jdk-8
  script:
    # - GPG_FILE=`find / -name xuxiaowei_0x97A36125_SECRET`
    # - GPG_FILE=/builds/xuxiaowei-cloud/xuxiaowei-cloud.tmp/xuxiaowei_0x97A36125_SECRET
    # - echo $GPG_FILE
    # - gpg --import $GPG_FILE
    - git --version
    - echo 常量网址：https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
    - echo 常量网址（极狐GitLab中文文档）：https://docs.gitlab.cn/jh/ci/variables/predefined_variables.html
    - echo 当前分支：$CI_COMMIT_BRANCH
    - echo 分支上存在的上一个最新提交：$CI_COMMIT_BEFORE_SHA
    - echo 分支上存在的上一个最新提交前八个字符：$CI_COMMIT_SHORT_SHA
    - echo ISO8601格式的提交时间戳：$CI_COMMIT_TIMESTAMP
    - echo "Name<email>格式提交的作者：$CI_COMMIT_AUTHOR"
    - echo 提交标记名称。仅在标签的管道中可用：$CI_COMMIT_TAG
    - echo 主分支：$CI_DEFAULT_BRANCH
    - echo 项目路径：$CI_PROJECT_DIR
    - echo 单个执行器中构建执行的唯一ID：$CI_CONCURRENT_ID
    - echo 单个执行器和项目中构建执行的唯一ID：$CI_CONCURRENT_PROJECT_ID
    - echo 作业是否手动启动：$CI_JOB_MANUAL
    - echo 作业的名称：$CI_JOB_NAME
    - echo 作业阶段的名称：$CI_JOB_STAGE
    - echo 作业开始时的UTC日期时间，采用ISO8601格式：$CI_JOB_STARTED_AT
    - echo 创建管道时的UTC日期时间，采用ISO8601格式：$CI_PIPELINE_CREATED_AT
    - echo 当前项目的ID，此ID在GitLab实例上的所有项目中都是唯一的：$CI_PROJECT_ID
    - echo 作业的项目命名空间（用户名或组名）：$CI_PROJECT_NAMESPACE
    - echo 项目目录的名称：$CI_PROJECT_NAME
    - echo 包含项目名称的项目命名空间：$CI_PROJECT_PATH
    - echo GitLab实例的主要版本：$CI_SERVER_VERSION_MAJOR
    - echo GitLab实例的次要版本：$CI_SERVER_VERSION_MINOR
    - echo GitLab实例的补丁版本：$CI_SERVER_VERSION_PATCH
    - echo GitLab实例的完整版本：$CI_SERVER_VERSION
    - echo 开始作业的用户的电子邮件：$GITLAB_USER_EMAIL
    - echo 启动作业的用户的ID：$GITLAB_USER_ID
    - echo 启动作业的用户的用户名：$GITLAB_USER_LOGIN
    - echo 启动作业的用户的名称：$GITLAB_USER_NAME
    - echo 合并请求的实例级ID，这是GitLab上所有项目的唯一ID：$CI_MERGE_REQUEST_ID
    - echo 合并请求的项目级IID（内部ID），此ID对于当前项目是唯一的：$CI_MERGE_REQUEST_IID
    - echo 合并请求的目标分支名称：$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - echo 作业详细信息URL：$CI_JOB_URL
    - echo 作业的内部ID，在GitLab实例中的所有作业中是唯一的：$CI_JOB_ID
    - echo 正在使用的Runner的唯一ID：$CI_RUNNER_ID
    - echo 运行作业的GitLabRunner的版本：$CI_RUNNER_VERSION
    - echo 管道详细信息的URL：$CI_PIPELINE_URL
    - echo 当前管道的实例级ID。此ID在GitLab实例上的所有项目中都是唯一的：$CI_PIPELINE_ID
    - echo 当前管道的项目级IID（内部ID），此ID仅在当前项目中是唯一的：$CI_PIPELINE_IID
    - echo GitLab实例URL的主机，没有协议或端口：$CI_SERVER_HOST
    - echo 项目的HTTP（S）地址：$CI_PROJECT_URL
    - echo 克隆Git存储库的URL：$CI_REPOSITORY_URL
    # 配置 Maven 仓库的密码，用于上传 Maven
    - sed -i "s#</servers>#<server><id>ossrh</id><username>$ossrh_user</username><password>$ossrh_pass</password></server>\n&#" settings.xml
    - sed -i "s#</servers>#<server><id>ossrh</id><username>$ossrh_user</username><password>$ossrh_pass</password></server>\n&#" settings-private.xml
    # 使用 Maven 私库（文档：https://gitlab-k8s.xuxiaowei.com.cn/gitlab-k8s/docs/nexus/docker-install-nexus），用于加速下载依赖
    - mvn clean -e -U package install -DskipTests -s settings-private.xml && PACKAGE_FLAG=1;
    - if [ "$PACKAGE_FLAG" == "1" ]; then echo '打包完成'; else echo '打包失败' && xxxx; fi
    # 使用 Maven 私库（文档：https://gitlab-k8s.xuxiaowei.com.cn/gitlab-k8s/docs/nexus/docker-install-nexus），用于加速下载依赖
    - mvn -pl admin-server -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl admin-server -s settings-private.xml docker:push;
    - mvn -pl gateway -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl gateway -s settings-private.xml docker:push;
    - mvn -pl passport -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl passport -s settings-private.xml docker:push;
    - mvn -pl resource-services-parent/canal -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/canal -s settings-private.xml docker:push;
    - mvn -pl resource-services-parent/file -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/file -s settings-private.xml docker:push;
    - mvn -pl resource-services-parent/master-data -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/master-data -s settings-private.xml docker:push;
    - mvn -pl resource-services-parent/user -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/user -s settings-private.xml docker:push;
    - mvn -pl resource-services-parent/webservice -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/webservice -s settings-private.xml docker:push;
    - mvn -pl resource-services-parent/websocket -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/websocket -s settings-private.xml docker:push;
    - mvn -pl resource-services-parent/wechat-miniprogram -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/wechat-miniprogram -s settings-private.xml docker:push;
    - mvn -pl resource-services-parent/wechat-offiaccount -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl resource-services-parent/wechat-offiaccount -s settings-private.xml docker:push;
    - mvn -pl ui -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl ui -s settings-private.xml docker:push;
    - mvn -pl xxl-job-admin -s settings-private.xml docker:build -DCI_PIPELINE_ID=$CI_PIPELINE_ID;
    - mvn -pl xxl-job-admin -s settings-private.xml docker:push;
    # 删除本地 Maven 仓库中的产物（依赖），以提高缓存速度（本次的产物在下一次使用依赖时是无用的，会重新生成）
    - rm -rf .m2/repository/cloud/xuxiaowei
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .m2/repository
      - passport-ui/node/
      - passport-ui/node_modules/
      - ui/node/
      - ui/node_modules/
  # 产物超过 1000M，取消产物上传，节省时间
  #  artifacts:
  #    name: package
  #    paths:
  #      - target/*.jar
  #      - target/*.asc
  #      - target/*.pom
  #      - "*/target/*.jar"
  #      - "*/target/*.asc"
  #      - "*/target/*.pom"
  #      - "*/*/target/*.jar"
  #      - "*/*/target/*.asc"
  #      - "*/*/target/*.pom"
  #      - ui/dist
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"

#
# 使用 shell 发布 k8s
# 在 k8s 所在的服务器上执行
k8s-publish:
  stage: k8s-publish
  needs:
    - job: k8s-package
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # -n xuxiaowei-cloud：指定命名空间为 xuxiaowei-cloud
    # $CI_PIPELINE_ID：当前管道的实例级ID
    - kubectl -n xuxiaowei-cloud set image deployment/admin-server-deployment admin-server=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/admin-server:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
    - kubectl -n xuxiaowei-cloud set image deployment/canal-deployment canal=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/canal:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
    - kubectl -n xuxiaowei-cloud set image deployment/file-deployment file=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/file:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
    - kubectl -n xuxiaowei-cloud set image deployment/gateway-deployment gateway=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/gateway:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
    - kubectl -n xuxiaowei-cloud set image deployment/master-data-deployment master-data=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/master-data:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
    - kubectl -n xuxiaowei-cloud set image deployment/passport-deployment passport=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/passport:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
    - kubectl -n xuxiaowei-cloud set image deployment/ui-deployment ui=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/ui:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
    - kubectl -n xuxiaowei-cloud set image deployment/user-deployment user=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/user:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
    - kubectl -n xuxiaowei-cloud set image deployment/webservice-deployment webservice=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/webservice:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
    - kubectl -n xuxiaowei-cloud set image deployment/websocket-deployment websocket=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/websocket:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
    - kubectl -n xuxiaowei-cloud set image deployment/wechat-miniprogram-deployment wechat-miniprogram=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/wechat-miniprogram:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
    - kubectl -n xuxiaowei-cloud set image deployment/wechat-offiaccount-deployment wechat-offiaccount=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/wechat-offiaccount:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
    - kubectl -n xuxiaowei-cloud set image deployment/xxl-job-admin-deployment xxl-job-admin=registry.docker.example.xuxiaowei.cloud/cloud.xuxiaowei/xxl-job-admin:0.0.1-SNAPSHOT-$CI_PIPELINE_ID
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

#
# 等待/检查滚动发布
k8s-waiting-rollout:admin-server:
  stage: k8s-waiting-rollout
  needs:
    - job: k8s-publish
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
    - kubectl -n xuxiaowei-cloud rollout status deployment/admin-server-deployment
  # 超时时间，根据程序启动时间调整
  timeout: 600s
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

#
# 等待/检查滚动发布
k8s-waiting-rollout:canal:
  stage: k8s-waiting-rollout
  needs:
    - job: k8s-publish
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
    - kubectl -n xuxiaowei-cloud rollout status deployment/canal-deployment
  # 超时时间，根据程序启动时间调整
  timeout: 600s
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

#
# 等待/检查滚动发布
k8s-waiting-rollout:file:
  stage: k8s-waiting-rollout
  needs:
    - job: k8s-publish
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
    - kubectl -n xuxiaowei-cloud rollout status deployment/file-deployment
  # 超时时间，根据程序启动时间调整
  timeout: 600s
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

#
# 等待/检查滚动发布
k8s-waiting-rollout:gateway:
  stage: k8s-waiting-rollout
  needs:
    - job: k8s-publish
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
    - kubectl -n xuxiaowei-cloud rollout status deployment/gateway-deployment
  # 超时时间，根据程序启动时间调整
  timeout: 600s
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

#
# 等待/检查滚动发布
k8s-waiting-rollout:master-data:
  stage: k8s-waiting-rollout
  needs:
    - job: k8s-publish
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
    - kubectl -n xuxiaowei-cloud rollout status deployment/master-data-deployment
  # 超时时间，根据程序启动时间调整
  timeout: 600s
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

#
# 等待/检查滚动发布
k8s-waiting-rollout:passport:
  stage: k8s-waiting-rollout
  needs:
    - job: k8s-publish
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
    - kubectl -n xuxiaowei-cloud rollout status deployment/passport-deployment
  # 超时时间，根据程序启动时间调整
  timeout: 600s
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

##
## 等待/检查滚动发布
#k8s-waiting-rollout:ui:
#  stage: k8s-waiting-rollout
#  needs:
#    - job: k8s-publish
#  image: bitnami/kubectl:1.27.4
#  variables:
#    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
#  script:
#    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
#    - kubectl -n xuxiaowei-cloud rollout status deployment/ui-deployment
#  # 超时时间，根据程序启动时间调整
#  timeout: 600s
#  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
#  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
#  rules:
#    # PR 到 k8s 分支时预执行
#    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
#    # PR 合并到 k8s 后执行、推送到 k8s 分支时
#    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

#
# 等待/检查滚动发布
k8s-waiting-rollout:user:
  stage: k8s-waiting-rollout
  needs:
    - job: k8s-publish
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
    - kubectl -n xuxiaowei-cloud rollout status deployment/user-deployment
  # 超时时间，根据程序启动时间调整
  timeout: 600s
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

#
# 等待/检查滚动发布
k8s-waiting-rollout:webservice:
  stage: k8s-waiting-rollout
  needs:
    - job: k8s-publish
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
    - kubectl -n xuxiaowei-cloud rollout status deployment/webservice-deployment
  # 超时时间，根据程序启动时间调整
  timeout: 600s
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

#
# 等待/检查滚动发布
k8s-waiting-rollout:websocket:
  stage: k8s-waiting-rollout
  needs:
    - job: k8s-publish
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
    - kubectl -n xuxiaowei-cloud rollout status deployment/websocket-deployment
  # 超时时间，根据程序启动时间调整
  timeout: 600s
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

#
# 等待/检查滚动发布
k8s-waiting-rollout:wechat-miniprogram:
  stage: k8s-waiting-rollout
  needs:
    - job: k8s-publish
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
    - kubectl -n xuxiaowei-cloud rollout status deployment/wechat-miniprogram-deployment
  # 超时时间，根据程序启动时间调整
  timeout: 600s
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

#
# 等待/检查滚动发布
k8s-waiting-rollout:wechat-offiaccount:
  stage: k8s-waiting-rollout
  needs:
    - job: k8s-publish
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
    - kubectl -n xuxiaowei-cloud rollout status deployment/wechat-offiaccount-deployment
  # 超时时间，根据程序启动时间调整
  timeout: 600s
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish

#
# 等待/检查滚动发布
k8s-waiting-rollout:xxl-job-admin:
  stage: k8s-waiting-rollout
  needs:
    - job: k8s-publish
  image: bitnami/kubectl:1.27.4
  variables:
    KUBECONFIG: $RUNNER_TEMP_PROJECT_DIR/KUBECONFIG
  script:
    # 查看滚动发布的状态，如果滚动发布未就绪，命令会等待
    - kubectl -n xuxiaowei-cloud rollout status deployment/xxl-job-admin-deployment
  # 超时时间，根据程序启动时间调整
  timeout: 600s
  # https://docs.gitlab.com/ee/ci/yaml/index.html#rules
  # 极狐GitLab中文文档：https://docs.gitlab.cn/jh/ci/yaml/index.html#rules
  rules:
    # PR 到 k8s 分支时预执行
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "k8s"
    # PR 合并到 k8s 后执行、推送到 k8s 分支时
    - if: $CI_COMMIT_BRANCH == "k8s"
#  tags:
#    # 仅在 tags 名称为 shell 的执行器上执行
#    # 在 k8s 所在的服务器上执行
#    # 个人服务器 Runner 标签（仅在个人服务器上执行）
#    - k8s-publish
