# 服务器
server:
  # 端口
  port: ${authorization_server_port:1301}
#
# Spring 配置
spring:
  main:
    # 覆盖Bean（前面固定的中文与英文之间不能有空格，否则索引越界）
    allow-bean-definition-overriding: true
  application:
    name: authorization-server
  # 配置环境
  profiles:
    # 激活
    active:
      - dev
  # Cloud 配置
  cloud:
    # 网络工具
    inetutils:
      # 将被忽略的网络接口的 Java 正则表达式列表。
      ignored-interfaces:
        # 正则表达式
        # 忽略 VMware 虚拟机网卡
        - VMware.*
        # 忽略 VirtualBox 虚拟机网卡
        - VirtualBox.*
    #
    # Nacos 配置
    nacos:
      # 服务发现
      discovery:
        # 服务发现地址
        server-addr: ${nacos_xuxiaowei_cloud_addr:nacos.example.xuxiaowei.cloud:8848}
        # 命名空间
        namespace:
      # 服务配置
      config:
        # 配置文件后缀名
        file-extension: yml
        # 配置服务器地址
        server-addr: ${nacos_xuxiaowei_cloud_addr:nacos.example.xuxiaowei.cloud:8848}
        # 命名空间
        namespace:
        # 共享配置
        shared-configs:
          - dataId: xuxiaowei.${spring.cloud.nacos.config.file-extension}
            # 是否支持刷新
            refresh: true


---
# 以下配置可放入 nacos 中


#
# 日志 配置
#
logging:
  # 日志等级
  level:
    # 在微服务中，直接使用 `web: debug` 无效
    # web: debug
    # org.springframework.web: debug
    # 包：日志等级
    cloud.xuxiaowei: debug
  # 日志文件
  file:
    # 文件名及路径
    name: /logs/${spring.application.name}/${spring.application.name}.log
    # 文件最大大小，单位: org.springframework.util.unit.DataSize
    # 已废弃，推荐使用：logging.logback.rollingpolicy.max-file-size
    # max-size: 20MB
    # 日志保存天数
    # 已废弃，推荐使用：logging.logback.rollingpolicy.max-history
    # max-history: 365
  logback:
    rollingpolicy:
      # 文件最大大小，单位: org.springframework.util.unit.DataSize
      # 旧版使用：logging.file.max-size
      max-file-size: 20MB
      # 日志保存天数
      # 旧版使用：logging.file.max-history
      max-history: 365
      # 压缩文件命名
      # 后缀名中比原始配置添加了 `.log`，解压后方便打开看
      # 旧版使用：logging.pattern.rolling-file-name
      file-name-pattern: ${LOG_FILE}.%d{yyyy-MM-dd}.%i.log.gz
  # 格式
  pattern:
    # 压缩文件命名
    # 后缀名中比原始配置添加了 `.log`，解压后方便打开看
    # 已废弃，推荐使用：logging.logback.rollingpolicy.file-name-pattern
    # rolling-file-name: "${LOG_FILE}.%d{yyyy-MM-dd}.%i.log.gz"
    # 控制台日志格式
    # 默认值："%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    # 增加了：%X{NAME} %clr(:){faint} %X{IP} %clr(:){faint} %X{REQUEST_ID} %clr(:){faint}
    # LOG_LEVEL_PATTERN：日志等级
    # -%5p：宽度
    # PID：线程
    console: "%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %X{NAME} %clr(:){faint} %X{IP} %clr(:){faint} %X{REQUEST_ID} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    # 日志文件格式
    # 默认值："%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    # 增加了：%X{NAME} : %X{IP} : %X{REQUEST_ID} :
    file: "%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %X{NAME} : %X{IP} : %X{REQUEST_ID} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    # 日期时间格式
    dateformat: "yyyy-MM-dd HH:mm:ss.SSS"

# 管理服务
management:
  endpoints:
    web:
      exposure:
        include: '*'

# 数据库配置
spring:
  # 数据库
  datasource:
    dynamic:
      primary: xuxiaowei_cloud #设置默认的数据源或者数据源组,默认值即为master
      strict: true #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      datasource:
        xuxiaowei_cloud:
          # 数据库 连接串
          # url: jdbc:mysql://${mysql_xuxiaowei_cloud:mysql.example.xuxiaowei.cloud:3306}/${mysql_xuxiaowei_database:xuxiaowei_cloud}?useSSL=false&serverTimezone=GMT%2B8
          # 数据库 连接串 - 测试环境使用
          url: jdbc:p6spy:mysql://${mysql_xuxiaowei_cloud:mysql.example.xuxiaowei.cloud:3306}/${mysql_xuxiaowei_database:xuxiaowei_cloud}?useSSL=false&serverTimezone=GMT%2B8
          # 数据库 用户名
          username: ${mysql_xuxiaowei_cloud_username:root}
          # 数据库 密码
          password: ${mysql_xuxiaowei_cloud_password:xuxiaowei.com.cn}
          # 数据库 驱动名称
          # driver-class-name: com.mysql.cj.jdbc.Driver # 3.2.0开始支持SPI可省略此配置
          # 数据库 驱动名称 - 测试环境使用
          driver-class-name: com.p6spy.engine.spy.P6SpyDriver
        xuxiaowei_cloud_log:
          # 数据库 连接串
          # url: jdbc:mysql://${mysql_xuxiaowei_cloud:mysql.example.xuxiaowei.cloud:3306}/${mysql_xuxiaowei_database_log:xuxiaowei_cloud_log}?useSSL=false&serverTimezone=GMT%2B8
          # 数据库 连接串 - 测试环境使用
          url: jdbc:p6spy:mysql://${mysql_xuxiaowei_cloud:mysql.example.xuxiaowei.cloud:3306}/${mysql_xuxiaowei_database_log:xuxiaowei_cloud_log}?useSSL=false&serverTimezone=GMT%2B8
          # 数据库 用户名
          username: ${mysql_xuxiaowei_cloud_username:root}
          # 数据库 密码
          password: ${mysql_xuxiaowei_cloud_password:xuxiaowei.com.cn}
          # 数据库 驱动名称
          # driver-class-name: com.mysql.cj.jdbc.Driver # 3.2.0开始支持SPI可省略此配置
          # 数据库 驱动名称 - 测试环境使用
          driver-class-name: com.p6spy.engine.spy.P6SpyDriver
#
# MyBatis Plus 配置
#
mybatis-plus:
  # MyBatis Mapper 所对应的 XML 文件位置，如果您在 Mapper 中有自定义方法（XML 中有自定义实现），需要进行该配置，告诉 Mapper 所对应的 XML 文件位置。
  # 必须配置（否则出现：org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)）
  # 父子项目中都有 xml 文件时，文件夹不能使用 *，xml文件名可使用 *
  mapper-locations:
    - classpath:mapper/*/*.xml
  # MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使用类名，
  # 而不用使用全限定的类名（即 XML 中调用的时候不用包含包名）。
  type-aliases-package: cloud.xuxiaowei.*.entity
  # 枚举类 扫描路径，如果配置了该属性，会将路径下的枚举类进行注入，让实体类字段能够简单快捷的使用枚举属性，
  # 具体使用请结合 枚举注入（https://mp.baomidou.com/guide/enum.html） 查看。
  type-enums-package: cloud.xuxiaowei.*.enums
  global-config:
    db-config:
      # 逻辑已删除值,(逻辑删除下有效，默认值：1)
      logic-delete-value: 1
      # 逻辑未删除值,(逻辑删除下有效，默认值：0)
      logic-not-delete-value: 0
    # MyBatis 配置
  configuration:
    # 缓存
    cache-enabled: true

---

# Thymeleaf 配置
spring:
  thymeleaf:
    # 是否启用模板缓存。
    cache: false

---

# Redis 配置
spring:
  redis:
    database: ${redis_xuxiaowei_cloud_database:1}
    password: ${redis_xuxiaowei_cloud_password:xuxiaowei.com.cn}
    host: ${redis_xuxiaowei_cloud_host:redis.example.xuxiaowei.cloud}
    port: ${redis_xuxiaowei_cloud_port:6379}

---

# 微服务配置
cloud:
  # Security 配置
  security:
    # 登录页面地址
    login-page-url: ${login_page_url:http://gateway.example.xuxiaowei.cloud:1101}

---

# 加密配置
encrypt:
  key-store:
    # keytool -genkeypair -alias "xuxiaowei.cloud-alias" -keyalg RSA -validity 3650 -keystore xuxiaowei.cloud.jks -storepass "xuxiaowei.cloud-storepass" -dname "CN=徐晓伟,OU=徐晓伟工作室,O=徐晓伟工作室,L=青岛,ST=山东,C=CH"
    # 密钥口令和密钥库口令相同（否则可能验证失败）
    location: classpath:/xuxiaowei.cloud.jks
    # 别名
    alias: xuxiaowei.cloud-alias
    # 密码
    password: xuxiaowei.cloud-storepass
